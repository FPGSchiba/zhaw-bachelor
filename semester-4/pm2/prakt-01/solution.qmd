---
title: "DSPM2: Praktikum 1"
subtitle: "Mein Lösungsansatz"
author: "Jann Erhardt"
date: last-modified
geometry: margin=1in
format: pdf
output:
  pdf_document:
    toc: true
    page_breaks: "before"
---

Video Erklärung: [Hier](https://zhaw-my.sharepoint.com/:v:/g/personal/erharjan_students_zhaw_ch/EShZng_OruxPveGFOJwGanYB7EBn2y6u1CLaenYXzm9BCQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJTdHJlYW1XZWJBcHAiLCJyZWZlcnJhbFZpZXciOiJTaGFyZURpYWxvZy1MaW5rIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXcifX0%3D&e=qHJCBc)

{{< pagebreak >}}

```{r setup, include=FALSE, echo=FALSE}
library(lubridate)
library(tidyverse)
library(stringr)

path <- "/Users/schiba/data/pm-02/ugz_luftqualitaetsmessung_seit-2012.csv"
```

```{r prepare_headers, echo=FALSE}
headers <- read.csv(path, header = FALSE, nrows = 6, stringsAsFactors = FALSE)
combined_headers <- apply(headers, 2, function(x) paste(na.omit(x[x != ""]), collapse = "_"))
```

```{r read_data, echo=FALSE}
data <- read.csv(path, skip = 6, header = FALSE)

names(data) <- combined_headers
names(data)[1] <- "datum"
```

```{r data_cleaning, warning=FALSE, echo=FALSE}
# Convert columns to appropriate types
data <- data |>
    mutate(across(-datum, ~ ifelse(. %in% c("NaN", ""), NA, .))) |> # Replace "NaN" and empty strings with NA
    mutate(across(-datum, ~ as.numeric(.))) # Convert remaining values to numeric
```

```{r location_parameter_extraction, echo=FALSE}
# Extract location and parameter information
col_info <- tibble(col_name = names(data)[-1]) |>
    mutate(
        # Extract location
        location = str_extract(col_name, "(?<=Zürich\\s)[A-Za-zäöüÄÖÜ]+"),
        location = ifelse(!is.na(location),
            str_to_lower(str_extract(location, "^[A-Za-zäöüÄÖÜ]+")),
            NA_character_
        ),
        location = str_replace_all(location, c("ä" = "ae", "ö" = "oe", "ü" = "ue", "Ä" = "Ae", "Ö" = "Oe", "Ü" = "Ue")),

        # Extract parameter
        parameter = str_extract(col_name, "(?<=_)(SO2|CO|O3_max|O3_nb|NO2|NO|PM10|T|Hr|p|WVs|StrGlo|RainDur)(?=_|$)"),
        parameter = ifelse(!is.na(parameter), str_to_lower(parameter), NA_character_),

        # Transform specific parameters
        parameter = case_when(
            parameter == "o3_max" ~ "o3_max_h1",
            parameter == "o3_nb" ~ "o3_nb_h1gt120",
            TRUE ~ parameter
        )
    ) |>
    select(col_name, location, parameter)
```

```{r data_preparation, echo=FALSE}
# Convert to long format, join with column info, then to wide format
result <- data |>
    pivot_longer(cols = -datum, names_to = "col_name", values_to = "value") |>
    left_join(col_info, by = "col_name") |>
    filter(!is.na(location) & !is.na(parameter)) |>
    select(-col_name) |>
    pivot_wider(
        id_cols = c(datum, location),
        names_from = parameter,
        values_from = value
    ) |>
    mutate(across(where(is.numeric), ~ round(., 2))) |>
    rename(standort = location) |>
    mutate(datum = as.Date(datum)) |>
    mutate(across(where(is.numeric), ~ ifelse(is.nan(.), NA, .)))
```

```{r wochentag_column, echo=FALSE}
# Sets the start of the week to monday
options("lubridate.week.start" = 1)

# Add weekday information
result["wochentag"] <- result$datum |>
    ymd() |>
    wday(label = TRUE, abbr = TRUE)

# Mutate it to only the first two characters
result <- result |>
    mutate(wochentag = factor(wochentag,
        levels = levels(wochentag),
        labels = str_sub(levels(wochentag), 1, 2)
    ))
```

```{r monat_column, echo=FALSE}
result["monat"] <- result$datum |>
    ymd() |>
    month(label = TRUE, abbr = TRUE)
```

```{r jahr_column, echo=FALSE}
result["jahr"] <- result$datum |>
    year()
```

# Visualisierungen

## Aufgabe A

**Aufgabenstellung**:
Stellen Sie in einem Scatterplot für den Standort Stampfenbachstrasse die Messgrössen
Globalstrahlung (y-Achse) und die maximale Ozonkonzentration während einer Stunde (xAchse) dar. Legen Sie zudem einen Glätter in die Grafik. Schauen Sie das beide Achsen
verständlich beschriftet sind und vergessen Sie die Bildunterschrift nicht. Ein Titel ist nicht
notwendig.

```{r a_plot, echo=FALSE, warning=FALSE, message=FALSE}
#| fig-width: 7
#| fig-height: 4
#| fig-align: center
#| fig-cap: "Scatterplot der Ozonkonzentration und Globalstrahlung für den Standort Stampfenbachstrasse"
result |>
    filter(standort == "stampfenbachstrasse") |>
    ggplot(aes(x = o3_max_h1, y = strglo)) +
    geom_point(alpha = 0.2) +
    geom_smooth(method = "loess", se = FALSE, message = FALSE) +
    labs(
        x = "Maximale Ozonkonzentration während einer Stunde (µg/m³)",
        y = "Globalstrahlung (W/m²)",
    )
```

{{< pagebreak >}}

## Aufgabe B

**Aufgabenstellung**:
Stellen Sie den Verlauf der Stickoxidkonzentration (NOx = NO + NO2) über den gesamten
Zeitraum gemeinsam für die Standorte Schimmelstrasse und Heubeeribüel dar. Achten sie
darauf, dass der zeitliche Verlauf der für beide Standorte gut erkennbar ist, beide Achsen
und die Legende (innerhalb der Grafik plaziert) verständlich beschriftet sind und vergessen
Sie die Bildunterschrift nicht. Die Grafik braucht keinen Titel.

```{r b_plot, echo=FALSE, warning=FALSE, message=FALSE}
#| fig-width: 7
#| fig-height: 4
#| fig-align: center
#| fig-cap: "Verlauf der log-transformierten NOx-Konzentrationen für Schimmelstrasse und Heubeeribüel. Farben repräsentieren die Standorte."
result |>
    filter(standort %in% c("schimmelstrasse", "heubeeribueel")) |>
    mutate(nox = log(no + no2)) |>
    ggplot(aes(x = datum, y = nox, color = standort)) + # Group by location using color
    geom_line(linewidth = 0.3) + # Thinner lines for clarity
    geom_smooth(
        aes(color = standort), # Add smoothed trend lines for each location
        se = FALSE, # Disable standard error bands for clarity
        linewidth = 1.2, # Thicker smoothed lines for better visibility
        linetype = "solid" # Use solid lines for smooth trends
    ) +
    scale_color_brewer(palette = "Accent", name = "Standort") + # Use a muted color palette
    labs(
        x = "Datum",
        y = expression("log(NOx-Konzentration)" ~ "(µg/m³)"), # Update y-axis label
    ) +
    theme_light() + # Use a light theme for better contrast
    theme(
        legend.position = c(0.85, 0.85), # Place legend inside the graphic (top-right corner)
        legend.background = element_rect(fill = "white", color = "black"), # Add a background to the legend
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 10)
    )
```

{{< pagebreak >}}

# Aufgabe C

**Aufgabenstellung**:
Stellen Sie die Streuung der PM10 Konzentration an der Rosengartenstrasse pro Wochentag
dar. Schauen Sie, dass beide Achsen verständlich beschriftet sind und vergessen Sie die
Bildunterschrift nicht. Die Grafik braucht keinen Titel.

```{r c_plot, echo=FALSE, warning=FALSE}
#| fig-cap: "Streuung der Log transformierten PM10-Konzentration pro Wochentag für den Standort Rosengartenstrasse"
#| fig-width: 5
#| fig-height: 3
result |>
    ungroup() |> # Remove any existing grouping
    filter(standort == "rosengartenstrasse") |>
    ggplot(aes(x = wochentag, y = pm10, fill = wochentag)) + # Add fill aesthetic for boxplots
    geom_boxplot(alpha = 0.7) + # Add transparency for better visuals
    scale_fill_brewer(palette = "Set3") + # Use a color palette for the fill
    scale_y_log10() + # Apply log transformation to the y-axis
    labs(
        x = "Wochentag",
        y = expression("PM10 Konzentration" ~ "(µg/m³)"), # Update y-axis label to reflect log transformation
    ) +
    theme_light() + # Use a light theme for better contrast
    theme(
        legend.position = "none" # Remove legend if not needed
    )
```

Nur die Achse ist Log Transformiert. Die Daten sind immernoch in der Originalen Form.
Log transformiert macht die Ausreisser nach unten und oben sehr viel besser sichtbar.

{{< pagebreak >}}

## Aufgabe D

**Aufgabenstellung**:
Stellen Sie den zeitlichen Verlauf der Stickoxidkonzentration an allen vier Stationen von 2012-
2020 für jeden Monat dar. In der Abbildung sollte der mittlere Verlauf und die Streuung der
Monate für alle Jahre ersichtlich sein. Schauen Sie, dass beide Achsen verständlich beschriftet
sind und vergessen Sie die Bildunterschrift nicht. Die Grafik braucht keinen Titel.

```{r d_plot_1, output=FALSE, echo=FALSE, warning=FALSE}
#| fig-width: 7
#| fig-height: 5
#| out-width: 6.5in
result |>
    filter(datum >= as.Date("2012-01-01") & datum <= as.Date("2020-12-31")) |>
    mutate(nox = log(no + no2)) |> # Log transformation here
    # First calculate monthly values for each year
    group_by(standort, jahr, monat) |>
    summarise(
        year_month_mean = mean(nox, na.rm = TRUE)
    ) |>
    mutate(
        monat_date = make_date(2012, monat, 1), # Use 2012 for consistent x-axis
        jahr = as.factor(jahr) # Convert year to factor for discrete colors
    ) |>
    ggplot() +
    # Add points for individual years with color
    geom_point(aes(x = monat_date, y = year_month_mean, color = jahr),
        size = 2, alpha = 0.7
    ) +
    geom_line(aes(x = monat_date, y = year_month_mean, color = jahr, group = jahr),
        alpha = 0.4, linewidth = 0.5
    ) +
    # Add summary line and ribbon
    stat_summary(
        aes(x = monat_date, y = year_month_mean),
        fun = mean,
        geom = "line",
        linewidth = 1.2,
        color = "black"
    ) +
    stat_summary(
        aes(x = monat_date, y = year_month_mean),
        fun.data = function(y) {
            data.frame(
                ymin = mean(y) - sd(y),
                ymax = mean(y) + sd(y)
            )
        },
        geom = "ribbon",
        fill = "grey",
        alpha = 0.2
    ) +
    facet_wrap(~standort, scales = "free_y") +
    scale_x_date(date_labels = "%B", date_breaks = "1 month") +
    scale_color_viridis_d(name = "Jahr") + # Use viridis color palette
    labs(
        x = "Monat",
        y = expression(log("NOx-Konzentration") ~ "(µg/m³)"), # Updated y-axis label to show log
        caption = "Mittlere monatliche NOx-Konzentrationen (Log-transformiert) mit Standardabweichung (2012-2020)\nFarbige Punkte und Linien zeigen Monatsmittelwerte einzelner Jahre"
    ) +
    theme_light() +
    theme(
        strip.text = element_text(size = 10),
        panel.grid.minor = element_blank(),
        legend.position = "right",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 9)
    )
```

```{r d_plot_2, echo=FALSE, message=FALSE, warning=FALSE}
#| fig-width: 6
#| fig-height: 9
#| fig-align: center
#| fig-cap: "Monatliche Verteilung der log-transformierten NOx-Konzentrationen mit Trendlinie (2012-2020) Boxplots zeigen Quartile je Monat, farbige Linien zeigen den geglätteten Mittelwert"
#| out-height: 7in
result |>
    filter(datum >= as.Date("2012-01-01") & datum <= as.Date("2020-12-31")) |>
    mutate(
        nox = log(no + no2), # Log transformation here
        month_year = format(datum, "%Y-%m"), # Create month-year combination for boxplots
        standort = tools::toTitleCase(standort) # Capitalize station names
    ) |>
    ggplot(aes(x = datum)) +
    # Add boxplots for each month, colored by station
    geom_boxplot(
        aes(y = nox, group = month_year, fill = standort),
        outlier.shape = NA, # Remove outlier points for clarity
        alpha = 0.5,
        width = 10 # Adjust width of boxplots
    ) +
    # Add smooth mean trend
    geom_smooth(
        aes(y = nox, color = standort),
        linewidth = 1,
        se = FALSE # Disable standard error band
    ) +
    facet_grid(standort ~ ., scales = "free_y", switch = "y") + # Move facet titles to the top
    scale_x_date(
        date_breaks = "2 years", # Show fewer x-axis labels
        date_labels = "%Y"
    ) +
    scale_fill_brewer(palette = "Set3", name = "Station") + # Add color to boxplots
    scale_color_brewer(palette = "Set3", name = "Station") + # Add color to smooth lines
    labs(
        x = "Jahr",
        y = expression(log("NOx-Konzentration") ~ "(µg/m³)"), # Updated y-axis label to show log
    ) +
    theme_light() +
    theme(
        strip.text = element_text(size = 10, face = "bold"), # Bold facet titles
        strip.background = element_rect(fill = "lightgrey", color = "black"),
        strip.placement = "outside", # Place facet titles outside the plot area
        panel.grid.minor = element_blank(),
        panel.spacing = unit(1.5, "lines"), # Add more spacing between facets
        plot.margin = margin(t = 10, r = 10, b = 30, l = 10) # Add extra space at the bottom
    )
```
